0. cmd 실행
> gem install bundler
> bundle
> jekyll serve

1. Git Bash 실행
> git config --global user.name "pterons"
> git config --global user.email "2pterons@gmail.com"
#잘 설정됐는지 확인
git config --list
#현재 폴더를 git 로컬 저장소로 등록한다
git init  
#원격 저장소를 추가
git remote
# git remote [단축이름] [url]
git remote add origin https://github.com/pterons/PYTHON_ML.git
이제 github 사이트의 repository에 연결됐다.

git push [리모트 저장소이름 ] [브랜치 이름]
git push origin master


폴더를 삭제해보자
git rm -r blog    또는  git rm myfile.txt  

그리고 커밋한다
git commit -m 'delete blog'

그리고 원격저장소에 다시 커밋한다
git push origin master

#git clone 은 3개의 커맨드 명령과 같다.
git init
git remote origin url
git pull origin master

//워킹디렉토리 클린
 git stash

//stash 내역보기
git stash list

# 로컬 폴더와 Github연동시
> git clone https://github.com/pterons/pterons.github.io.git

루비 설치가 완료되면 Start Command Prompt with Ruby를 검색해서 실행하고 아래 명령어들을 입력한다
2. Start Command Prompt with Ruby 실행
> gem install jekyll
> gem install bundler
> cd c:/githubPage/pterons.github.io
# 폴더로 이동했다면 이제 jekyll 테마를 가동시키기 위해 필요한 gem 파일들을 다운받아보자. 
# bundle install 명령어를 통해서 테마에 필요한(gemfile에 명시된) gem 파일들을 받을 수 있다.
# gem install bundle 또는 bundler
> bundle exec jekyll serve
> jekyll serve 또는 bundle exec jekyll serve
#오류시 
> chcp 65001
#입력후
> jekyll serve 또는 bundle exec jekyll serve

==================================

// branch를 새로 만든다

git branch develop-b



// branch를 변경한다.

git checkout develop-b



// 원본 repository의 최신 버전을 가져온다.

git fetch upstream   ( upstream 을 모른다면 조금 위쪽에 설명이 있다.)



// 원본 repository의 master 최신 버전을 merge한다.

git merge upstream/master



// 원격 저장소에 업데이트한다

git push origin develop-b



branch 만들기



master로만 작업을 할수는 없다. 브런치를 만드는 명령어는 아래와 같다.



git branch develop





git branch 를 하면 생성된 브런치가 출력된다.



이제 새로만든 브런치를 사용해보자



git checkout develop





그리고 현재 만든 브런치를 원격 저장소에 반영하려면 아래 명령어를 쓰면 된다.



git push TS develop



원격 저장소에 새로운 브런치가 생성되었고 거기서 계속 작업을 수행한후에



나중에 마스터로 merge 하면 된다.









원격 저장소의 특정 branch clone하기 ( git remote branch clone )



git clone -b "branch name" "git url"



ex)

git clone -b develop-ui https://github.com/pennya/CompanyNearFood.git











개발 branch (develop)가 있고  또 다른 branch (develop-a)를 따서 작업을하다가 merge 하는 방법



우선 develop-a 에서 develop 으로 branch를 이동해야한다.



바로 이동할 수는 없다 왜냐하면 develop-a에서 커밋하지 않은 파일이 checkout할 branch와 충돌나면 변경할수가 없기때문이다.



이동하기전에 기존 내용을 commit 하거나 stash로 잠시 보관하여 워킹 디렉토리를 정리하는 것이 좋다.



commit 또는 stash를 했다고 가정합니다.





// 이미 develop-a는 clean한 상태 ( git status로 확인)

// 그 상태에서 develop branch로 이동한다

git checkout develop



// develop-a 와 merge 한다

git merge develop-a



// 원격저장소에 develop을 commit 한다.

git push origin develop









remote branch delete



협업하기위해 remote branch를 만들었다가 작업을 마치고 master로 merge를 했다면 협업할때 사용한 remote branch는 더이상 필요하지 않다.



// 원격 저장소의 branch 리스트보기

git ls-remote 



// 원격 저장소의 특정 branch 삭제하기

git push origin --delete develop-a



